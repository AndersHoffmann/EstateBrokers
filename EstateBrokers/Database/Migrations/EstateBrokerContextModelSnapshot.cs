// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(EstateBrokerContext))]
    partial class EstateBrokerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Database.Address", b =>
                {
                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuildYear")
                        .HasColumnType("int");

                    b.Property<int>("ExteriorArea")
                        .HasColumnType("int");

                    b.Property<int>("InteriorArea")
                        .HasColumnType("int");

                    b.Property<double>("OwnershipCost")
                        .HasColumnType("float");

                    b.HasKey("PostalCode", "AddressLine1");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Database.Case", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RealtorID")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.HasIndex("RealtorID");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Database.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("PropertyID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Database.Realtor", b =>
                {
                    b.Property<int>("RealtorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealtorID");

                    b.ToTable("Realtors");
                });

            modelBuilder.Entity("Database.Case", b =>
                {
                    b.HasOne("Database.Property", "Property")
                        .WithOne("Case")
                        .HasForeignKey("Database.Case", "CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Realtor", "Realtor")
                        .WithMany("Case")
                        .HasForeignKey("RealtorID");

                    b.Navigation("Property");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("Database.Property", b =>
                {
                    b.Navigation("Case");
                });

            modelBuilder.Entity("Database.Realtor", b =>
                {
                    b.Navigation("Case");
                });
#pragma warning restore 612, 618
        }
    }
}
